using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

using ACW = Autodesk.Connectivity.WebServices;
using VDF = Autodesk.DataManagement.Client.Framework;

namespace CustomNumbering
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        private readonly VDF.Vault.Currency.Connections.Connection Connection = null;
        private readonly ACW.NumberingService NumService = null;
        private readonly ACW.NumProv CustomNumberingProvider = null;
        private static Scheme SelectedScheme;
        private static string EntityClassId;
        private static List<Scheme> DataGridSchemes;

        public MainWindow(VDF.Vault.Currency.Connections.Connection connection)
        {
            Connection = connection;

            NumService = Connection.WebServiceManager.NumberingService;
            CustomNumberingProvider = NumService.GetNumberingProviders().FirstOrDefault(p => p.SysName == "CustomNumberingProvider");

            InitializeComponent();
            InitializeUI();
        }

        private void InitializeUI()
        {
            m_entityClassIdSelection.DisplayMemberPath = "Key";
            m_entityClassIdSelection.SelectedValuePath = "Value";

            var FileId = new KeyValuePair<string, string>("Files", VDF.Vault.Currency.Entities.EntityClassIds.Files);
            var ItemId = new KeyValuePair<string, string>("Items", VDF.Vault.Currency.Entities.EntityClassIds.Items);
            var COId = new KeyValuePair<string, string>("Change Orders", VDF.Vault.Currency.Entities.EntityClassIds.ChangeOrders);

            m_entityClassIdSelection.Items.Add(FileId);
            m_entityClassIdSelection.Items.Add(ItemId);
            m_entityClassIdSelection.Items.Add(COId);

            m_numberSchemesGrid.Visibility = CustomNumberingProvider != null ? Visibility.Visible : Visibility.Hidden;
        }

        private void refreshSchemes()
        {
            if (CustomNumberingProvider != null)
            {
                try
                {
                    DataGridSchemes = NumService.GetNumberingSchemes(EntityClassId, ACW.NumSchmType.Activated)?
                        .Where(s => s.Provider == CustomNumberingProvider.SysName)
                        .Select(s => new Scheme(s)).ToList();

                    if (DataGridSchemes == null)
                        DataGridSchemes = new List<Scheme>();

                    m_numberSchemesGrid.ItemsSource = DataGridSchemes;
                }
                catch { } // Silently consume exceptions            
            }
        }

        private void M_helpButton_Click(object sender, RoutedEventArgs e)
        {
            SetupHelp help = new SetupHelp();
            help.ShowDialog();
        }

        private void M_entityClassIdSelection_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            EntityClassId = m_entityClassIdSelection.SelectedValue.ToString();
            refreshSchemes();
        }

        private void M_numberSchemesGrid_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            SelectedScheme = m_numberSchemesGrid.SelectedItem as Scheme;
        }

        private void M_addSupported_Click(object sender, RoutedEventArgs e)
        {
            if (CustomNumberingProvider != null)
            {
                ACW.NumSchmField[] Fields = new ACW.NumSchmField[]
                {
                    new ACW.AutogenField { Name = "Autogenerated Field", Len = 4, From = 1, To = 1000, StepSize = 1, ZeroPadding = true}
                };

                string Name = "Supported-" + Guid.NewGuid().ToString();

                ACW.NumSchm AddedScheme = NumService.AddNumberingScheme(EntityClassId, Name, CustomNumberingProvider.SysName, Fields, toUpperCase: false, reuseNumbers: false);
                NumService.EnableNumberingSchemes(new long[] { AddedScheme.SchmID }, true);

                DataGridSchemes.Add(new Scheme(AddedScheme));
                m_numberSchemesGrid.Items.Refresh();
            }
        }

        private void M_addUnsupported_Click(object sender, RoutedEventArgs e)
        {
            if (CustomNumberingProvider != null)
            {
                ACW.NumSchmField[] Fields = new ACW.NumSchmField[]
                {
                    new ACW.PredefListField { Name = "Predefined List", CodeArray = new ACW.CodeWord[] { new ACW.CodeWord { Code = "a", Descr = "" } }, DfltVal = "a", PredefListVal = "a" }
                };

                string Name = "Unupported-" + Guid.NewGuid().ToString();

                ACW.NumSchm AddedScheme = NumService.AddNumberingScheme(EntityClassId, Name, CustomNumberingProvider.SysName, Fields, toUpperCase: false, reuseNumbers: false);
                NumService.EnableNumberingSchemes(new long[] { AddedScheme.SchmID }, true);

                DataGridSchemes.Add(new Scheme(AddedScheme));
                m_numberSchemesGrid.Items.Refresh();
            }
        }

        private void M_showParameters_Click(object sender, RoutedEventArgs e)
        {
            if (SelectedScheme != null)
            {
                SchemeFields fieldWindow = new SchemeFields(Connection, SelectedScheme.SchemeId);
                fieldWindow.ShowDialog();
            }
        }

        private void M_generateNumber_Click(object sender, RoutedEventArgs e)
        {
            if (SelectedScheme != null)
            {
                long? OldSchemeId = NumService.GetNumberingSchemes(EntityClassId, ACW.NumSchmType.ApplicationDefault)?.FirstOrDefault().SchmID;

                try
                {
                    NumService.SetDefaultNumberingScheme(EntityClassId, SelectedScheme.SchemeId);

                    string GeneratedNumber = EntityManager.GetNumber(Connection, EntityClassId, SelectedScheme.SchemeId);

                    SelectedScheme.GeneratedNumber = GeneratedNumber;
                    SelectedScheme.ErrorMessage = "";
                }
                catch (Exception ex)
                {
                    SelectedScheme.GeneratedNumber = "";
                    SelectedScheme.ErrorMessage = ex.Message;
                }

                NumService.SetDefaultNumberingScheme(EntityClassId, OldSchemeId ?? EntityManager.NoDefaultFileScheme);
                m_numberSchemesGrid.Items.Refresh();
            }
        }

        private void M_deleteScheme_Click(object sender, RoutedEventArgs e)
        {
            if (SelectedScheme != null)
            {
                try
                {
                    NumService.DeleteNumberingSchemeUnconditional(SelectedScheme.SchemeId);
                }
                catch { } // Silently consume exceptions

                DataGridSchemes.Remove(SelectedScheme);
                m_numberSchemesGrid.Items.Refresh();
            }
        }

        private void M_exitButton_Click(object sender, RoutedEventArgs e)
        {
            this.Close();
        }

        private void M_numberingSample_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            if (Connection != null)
                VDF.Vault.Library.ConnectionManager.LogOut(Connection);
        }
    }
}
